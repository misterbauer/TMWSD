continue
!!message.user_id && message.user_id == current_user.id
message.user_id
current_user.id
!!message.user_id
correct_user_logged_in(message)
continue
correct_user_logged_in(message)
continue
current_user.id.to_s == params[:id]
current_user.id.to_s
current_user.id
current_user.id == params[:id]
logged_in? && current_user.id == params[:id]
params[:id]
current_user
logged_in?
continue
message
message.password_digest
continue
message.password.nil?
message.password == ""
message.password
continue
@message.save
continue
link_to(message_url)
message_link
message_linnk
continue
message.tokens.count
!message.tokens
message.tokens
continue
params
params[:password]
!message = token.message
!token
token
continue
token.message.authenticate("t")
continue
token
continue
token.message.authenticate("t")
message.authenticate("t")
token.message
params
continue
@message
continue
!token
token
continue
token.message
continue
!token.message
token.message
token
params
continue
Message.find(message_id)
continue
Message.find(params[:id])
params
continue
@message.tokens.last
Token.last
Token.count
@message
continue
@message.tokens.count
@message
continue
@message
Message.count
Token.count
Token.create(token: "tlkjsf")
Token.build(token: "tlkjsf")
Token.count
continue
Token.count
Token.all
Tokens.all
continue
@message
@message.valid?
@message.valid
Message.last
@message
continue
@message
continue
params
continue
params
continue
params
continue
message.authenticate("t")
message.authenticate(t)
message.password_digest
message.password
continue
token
continue
params
continue
params
continue
!message
if !message render 'deleted' end
if !message render 'deleted'
if !message then
if !message
continue
!message
message
continue
@message
params
continue
params
continue
params
continue
params
continue
params
continue
message
continue
message
continue
params
continue
params
continue
params
continue
params
continue
params
parmas
continue
params
continue
message.password == params[:password]
continue
message.password
params[:password]
message.password == params[:password]
continue
params
continue
params
continue
message.password
continue
message.password == params[:password]
continue
params
continue
message.password == params[:password]
continue
params
continue
message.password == params[:password]
continue
params
message_from_db
continue
message.password == params[:password]
params
message
continue
params
continue
message
continue
params
continue
message
continue
params
continue
params
continue
params
continue
params
continue
params
message
message.password
continue
@message.token
continue
@message.valid?
continue
@message.valid?
get_token
@message
continue
message_exists
continue
!@message
message_exists
continue
Message.find_by_token("abc")
continue
params
continue
Message.find_by_token("abc")
Message.all
params
